(function(w,a){typeof exports=="object"&&typeof module<"u"?a(exports,require("xmlbuilder2")):typeof define=="function"&&define.amd?define(["exports","xmlbuilder2"],a):(w=typeof globalThis<"u"?globalThis:w||self,a(w.lightningflowscanner={},w.xmlbuilder2))})(this,function(exports,xmlbuilder2){"use strict";class FlowElementConnector{constructor(t,e,s){this.element={},this.processed=!1,this.type=t,this.element=e,this.childName=s.childName?s.childName:void 0,this.childOf=s.childOf?s.childOf:void 0,e&&"targetReference"in e&&(this.reference=e.targetReference),e&&"connector"in e&&(this.connectorTargetReference=e.connector)}}class FlowElement{constructor(t,e,s){this.element={},this.element=s,this.subtype=e,this.metaType=t}}class FlowNode extends FlowElement{constructor(t,e,s){super("node",e,s),this.connectors=[];const r=e==="start"?"flowstart":t;this.name=r;const n=this.getConnectors(e,s);this.connectors=n,this.locationX=s.locationX,this.locationY=s.locationY}getConnectors(t,e){const s=[];if(t==="start"){if(e.connector&&s.push(new FlowElementConnector("connector",e.connector,{})),Array.isArray(e.scheduledPaths))for(const r of(e==null?void 0:e.scheduledPaths)||[])r.connector&&s.push(new FlowElementConnector("connector",r.connector,{childName:(r==null?void 0:r.name)??"AsyncAfterCommit",childOf:"scheduledPaths"}));else e.scheduledPaths&&s.push(new FlowElementConnector("connector",e.scheduledPaths,{childName:e.scheduledPaths.name,childOf:"scheduledPaths"}));return s}else if(t==="decisions"){if(e.defaultConnector&&s.push(new FlowElementConnector("defaultConnector",e.defaultConnector,{})),e.rules)if(Array.isArray(e.rules))for(const r of e.rules)r.connector&&s.push(new FlowElementConnector("connector",r.connector,{childName:r.name,childOf:"rules"}));else e.rules.connector&&s.push(new FlowElementConnector("connector",e.rules.connector,{childName:e.rules.name,childOf:"rules"}));return s}else{if(t==="assignments")return e.connector?[new FlowElementConnector("connector",e.connector,{})]:[];if(t==="loops")return e.nextValueConnector&&s.push(new FlowElementConnector("nextValueConnector",e.nextValueConnector,{})),e.noMoreValuesConnector&&s.push(new FlowElementConnector("noMoreValuesConnector",e.noMoreValuesConnector,{})),s;if(t==="actionCalls")return e.connector&&s.push(new FlowElementConnector("connector",e.connector,{})),e.faultConnector&&s.push(new FlowElementConnector("faultConnector",e.faultConnector,{})),s;if(t==="waits"){if(e.defaultConnector&&s.push(new FlowElementConnector("defaultConnector",e.defaultConnector,{})),e.faultConnector&&s.push(new FlowElementConnector("faultConnector",e.faultConnector,{})),Array.isArray(e.waitEvents))for(const r of e.waitEvents)r.connector&&s.push(new FlowElementConnector("connector",r.connector,{childName:r.name,childOf:"waitEvents"}));return s}else return t==="recordCreates"?(e.connector&&s.push(new FlowElementConnector("connector",e.connector,{})),e.faultConnector&&s.push(new FlowElementConnector("faultConnector",e.faultConnector,{})),s):t==="recordDeletes"?(e.connector&&s.push(new FlowElementConnector("connector",e.connector,{})),e.faultConnector&&s.push(new FlowElementConnector("faultConnector",e.faultConnector,{})),s):t==="recordLookups"?(e.connector&&s.push(new FlowElementConnector("connector",e.connector,{})),e.faultConnector&&s.push(new FlowElementConnector("faultConnector",e.faultConnector,{})),s):t==="recordUpdates"?(e.connector&&s.push(new FlowElementConnector("connector",e.connector,{})),e.faultConnector&&s.push(new FlowElementConnector("faultConnector",e.faultConnector,{})),s):t==="subflows"?e.connector?[new FlowElementConnector("connector",e.connector,{})]:[]:t==="screens"?e.connector?[new FlowElementConnector("connector",e.connector,{})]:[]:e.connector?[new FlowElementConnector("connector",e.connector,{})]:[]}}}class FlowMetadata extends FlowElement{constructor(t,e){super("metadata",t,e)}}class FlowVariable extends FlowElement{constructor(t,e,s){super("variable",e,s),this.name=t,this.dataType=s.dataType}}function getDefaultExportFromCjs(a){return a&&a.__esModule&&Object.prototype.hasOwnProperty.call(a,"default")?a.default:a}var browser={exports:{}},process=browser.exports={},cachedSetTimeout,cachedClearTimeout;function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}(function(){try{typeof setTimeout=="function"?cachedSetTimeout=setTimeout:cachedSetTimeout=defaultSetTimout}catch{cachedSetTimeout=defaultSetTimout}try{typeof clearTimeout=="function"?cachedClearTimeout=clearTimeout:cachedClearTimeout=defaultClearTimeout}catch{cachedClearTimeout=defaultClearTimeout}})();function runTimeout(a){if(cachedSetTimeout===setTimeout)return setTimeout(a,0);if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout)return cachedSetTimeout=setTimeout,setTimeout(a,0);try{return cachedSetTimeout(a,0)}catch{try{return cachedSetTimeout.call(null,a,0)}catch{return cachedSetTimeout.call(this,a,0)}}}function runClearTimeout(a){if(cachedClearTimeout===clearTimeout)return clearTimeout(a);if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout)return cachedClearTimeout=clearTimeout,clearTimeout(a);try{return cachedClearTimeout(a)}catch{try{return cachedClearTimeout.call(null,a)}catch{return cachedClearTimeout.call(this,a)}}}var queue=[],draining=!1,currentQueue,queueIndex=-1;function cleanUpNextTick(){!draining||!currentQueue||(draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue())}function drainQueue(){if(!draining){var a=runTimeout(cleanUpNextTick);draining=!0;for(var t=queue.length;t;){for(currentQueue=queue,queue=[];++queueIndex<t;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,t=queue.length}currentQueue=null,draining=!1,runClearTimeout(a)}}process.nextTick=function(a){var t=new Array(arguments.length-1);if(arguments.length>1)for(var e=1;e<arguments.length;e++)t[e-1]=arguments[e];queue.push(new Item(a,t)),queue.length===1&&!draining&&runTimeout(drainQueue)};function Item(a,t){this.fun=a,this.array=t}Item.prototype.run=function(){this.fun.apply(null,this.array)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={};function noop(){}process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.prependListener=noop,process.prependOnceListener=noop,process.listeners=function(a){return[]},process.binding=function(a){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(a){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};var browserExports=browser.exports;const process$1=getDefaultExportFromCjs(browserExports);var pathBrowserify,hasRequiredPathBrowserify;function requirePathBrowserify(){if(hasRequiredPathBrowserify)return pathBrowserify;hasRequiredPathBrowserify=1;function a(r){if(typeof r!="string")throw new TypeError("Path must be a string. Received "+JSON.stringify(r))}function t(r,n){for(var o="",i=0,l=-1,u=0,c,f=0;f<=r.length;++f){if(f<r.length)c=r.charCodeAt(f);else{if(c===47)break;c=47}if(c===47){if(!(l===f-1||u===1))if(l!==f-1&&u===2){if(o.length<2||i!==2||o.charCodeAt(o.length-1)!==46||o.charCodeAt(o.length-2)!==46){if(o.length>2){var d=o.lastIndexOf("/");if(d!==o.length-1){d===-1?(o="",i=0):(o=o.slice(0,d),i=o.length-1-o.lastIndexOf("/")),l=f,u=0;continue}}else if(o.length===2||o.length===1){o="",i=0,l=f,u=0;continue}}n&&(o.length>0?o+="/..":o="..",i=2)}else o.length>0?o+="/"+r.slice(l+1,f):o=r.slice(l+1,f),i=f-l-1;l=f,u=0}else c===46&&u!==-1?++u:u=-1}return o}function e(r,n){var o=n.dir||n.root,i=n.base||(n.name||"")+(n.ext||"");return o?o===n.root?o+i:o+r+i:i}var s={resolve:function(){for(var n="",o=!1,i,l=arguments.length-1;l>=-1&&!o;l--){var u;l>=0?u=arguments[l]:(i===void 0&&(i=process$1.cwd()),u=i),a(u),u.length!==0&&(n=u+"/"+n,o=u.charCodeAt(0)===47)}return n=t(n,!o),o?n.length>0?"/"+n:"/":n.length>0?n:"."},normalize:function(n){if(a(n),n.length===0)return".";var o=n.charCodeAt(0)===47,i=n.charCodeAt(n.length-1)===47;return n=t(n,!o),n.length===0&&!o&&(n="."),n.length>0&&i&&(n+="/"),o?"/"+n:n},isAbsolute:function(n){return a(n),n.length>0&&n.charCodeAt(0)===47},join:function(){if(arguments.length===0)return".";for(var n,o=0;o<arguments.length;++o){var i=arguments[o];a(i),i.length>0&&(n===void 0?n=i:n+="/"+i)}return n===void 0?".":s.normalize(n)},relative:function(n,o){if(a(n),a(o),n===o||(n=s.resolve(n),o=s.resolve(o),n===o))return"";for(var i=1;i<n.length&&n.charCodeAt(i)===47;++i);for(var l=n.length,u=l-i,c=1;c<o.length&&o.charCodeAt(c)===47;++c);for(var f=o.length,d=f-c,h=u<d?u:d,p=-1,m=0;m<=h;++m){if(m===h){if(d>h){if(o.charCodeAt(c+m)===47)return o.slice(c+m+1);if(m===0)return o.slice(c+m)}else u>h&&(n.charCodeAt(i+m)===47?p=m:m===0&&(p=0));break}var g=n.charCodeAt(i+m),b=o.charCodeAt(c+m);if(g!==b)break;g===47&&(p=m)}var y="";for(m=i+p+1;m<=l;++m)(m===l||n.charCodeAt(m)===47)&&(y.length===0?y+="..":y+="/..");return y.length>0?y+o.slice(c+p):(c+=p,o.charCodeAt(c)===47&&++c,o.slice(c))},_makeLong:function(n){return n},dirname:function(n){if(a(n),n.length===0)return".";for(var o=n.charCodeAt(0),i=o===47,l=-1,u=!0,c=n.length-1;c>=1;--c)if(o=n.charCodeAt(c),o===47){if(!u){l=c;break}}else u=!1;return l===-1?i?"/":".":i&&l===1?"//":n.slice(0,l)},basename:function(n,o){if(o!==void 0&&typeof o!="string")throw new TypeError('"ext" argument must be a string');a(n);var i=0,l=-1,u=!0,c;if(o!==void 0&&o.length>0&&o.length<=n.length){if(o.length===n.length&&o===n)return"";var f=o.length-1,d=-1;for(c=n.length-1;c>=0;--c){var h=n.charCodeAt(c);if(h===47){if(!u){i=c+1;break}}else d===-1&&(u=!1,d=c+1),f>=0&&(h===o.charCodeAt(f)?--f===-1&&(l=c):(f=-1,l=d))}return i===l?l=d:l===-1&&(l=n.length),n.slice(i,l)}else{for(c=n.length-1;c>=0;--c)if(n.charCodeAt(c)===47){if(!u){i=c+1;break}}else l===-1&&(u=!1,l=c+1);return l===-1?"":n.slice(i,l)}},extname:function(n){a(n);for(var o=-1,i=0,l=-1,u=!0,c=0,f=n.length-1;f>=0;--f){var d=n.charCodeAt(f);if(d===47){if(!u){i=f+1;break}continue}l===-1&&(u=!1,l=f+1),d===46?o===-1?o=f:c!==1&&(c=1):o!==-1&&(c=-1)}return o===-1||l===-1||c===0||c===1&&o===l-1&&o===i+1?"":n.slice(o,l)},format:function(n){if(n===null||typeof n!="object")throw new TypeError('The "pathObject" argument must be of type Object. Received type '+typeof n);return e("/",n)},parse:function(n){a(n);var o={root:"",dir:"",base:"",ext:"",name:""};if(n.length===0)return o;var i=n.charCodeAt(0),l=i===47,u;l?(o.root="/",u=1):u=0;for(var c=-1,f=0,d=-1,h=!0,p=n.length-1,m=0;p>=u;--p){if(i=n.charCodeAt(p),i===47){if(!h){f=p+1;break}continue}d===-1&&(h=!1,d=p+1),i===46?c===-1?c=p:m!==1&&(m=1):c!==-1&&(m=-1)}return c===-1||d===-1||m===0||m===1&&c===d-1&&c===f+1?d!==-1&&(f===0&&l?o.base=o.name=n.slice(1,d):o.base=o.name=n.slice(f,d)):(f===0&&l?(o.name=n.slice(1,c),o.base=n.slice(1,d)):(o.name=n.slice(f,c),o.base=n.slice(f,d)),o.ext=n.slice(c,d)),f>0?o.dir=n.slice(0,f-1):l&&(o.dir="/"),o},sep:"/",delimiter:":",win32:null,posix:null};return s.posix=s,pathBrowserify=s,pathBrowserify}var pathBrowserifyExports=requirePathBrowserify();class FlowResource extends FlowElement{constructor(t,e,s){super("resource",e,s),this.name=t}}class Flow{constructor(t,e){if(this.flowVariables=["choices","constants","dynamicChoiceSets","formulas","variables"],this.flowResources=["textTemplates","stages"],this.flowMetadata=["description","apiVersion","processMetadataValues","processType","interviewLabel","label","status","runInMode","startElementReference","isTemplate","fullName","timeZoneSidKey","isAdditionalPermissionRequiredToRun","migratedFromWorkflowRuleName","triggerOrder","environments","segment"],this.flowNodes=["actionCalls","apexPluginCalls","assignments","collectionProcessors","decisions","loops","orchestratedStages","recordCreates","recordDeletes","recordLookups","recordUpdates","recordRollbacks","screens","start","steps","subflows","waits"],t){this.fsPath=pathBrowserifyExports.resolve(t);let s=pathBrowserifyExports.basename(pathBrowserifyExports.basename(this.fsPath),pathBrowserifyExports.extname(this.fsPath));s.includes(".")&&(s=s.split(".")[0]),this.name=s}e&&(!!e&&typeof e=="object"&&"Flow"in e?this.xmldata=e.Flow:this.xmldata=e,this.preProcessNodes())}preProcessNodes(){this.label=this.xmldata.label,this.interviewLabel=this.xmldata.interviewLabel,this.processType=this.xmldata.processType,this.processMetadataValues=this.xmldata.processMetadataValues,this.startElementReference=this.xmldata.startElementReference,this.start=this.xmldata.start,this.status=this.xmldata.status,this.type=this.xmldata.processType,this.triggerOrder=this.xmldata.triggerOrder;const t=[];for(const e in this.xmldata){const s=this.xmldata[e];if(this.flowMetadata.includes(e))if(Array.isArray(s))for(const r of s)t.push(new FlowMetadata(e,r));else t.push(new FlowMetadata(e,s));else if(this.flowVariables.includes(e))if(Array.isArray(s))for(const r of s)t.push(new FlowVariable(r.name,e,r));else t.push(new FlowVariable(s.name,e,s));else if(this.flowNodes.includes(e))if(Array.isArray(s))for(const r of s)t.push(new FlowNode(r.name,e,r));else t.push(new FlowNode(s.name,e,s));else if(this.flowResources.includes(e))if(Array.isArray(s))for(const r of s)t.push(new FlowResource(r.name,e,r));else t.push(new FlowResource(s.name,e,s))}this.elements=t,this.startReference=this.findStart()}findStart(){let t="";const e=this.elements.filter(s=>s instanceof FlowNode);return this.startElementReference?t=this.startElementReference:e.find(s=>s.subtype==="start")&&(t=e.find(r=>r.subtype==="start").connectors[0].reference),t}toXMLString(){try{return this.generateDoc()}catch(t){return console.warn(`Unable to write xml, caught an error ${t.toString()}`),""}}generateDoc(){return xmlbuilder2.create({encoding:"UTF-8"},{Flow:this.xmldata}).root().att("xmlns","http://soap.sforce.com/2006/04/metadata").end({prettyPrint:!0})}}class FlowAttribute{constructor(t,e,s){this.metaType="attribute",this.name=t,this.subtype=e,this.expression=s}}class ResultDetails{constructor(t){if(this.violation=t,this.name=t.name,this.metaType=t.metaType,this.type=t.subtype,t.metaType==="variable"){const e=t;this.details={dataType:e.dataType}}if(t.metaType==="node"){const e=t;this.details={locationX:e.locationX,locationY:e.locationY,connectsTo:e.connectors.map(s=>s.reference)}}if(t.metaType==="attribute"){const e=t;this.details={expression:e.expression}}}}class RuleResult{constructor(t,e,s){this.details=[],this.ruleDefinition=t,this.ruleName=t.name,this.severity=t.severity?t.severity:"error",this.occurs=!1,this.details=e,e.length>0&&(this.occurs=!0),s&&(this.errorMessage=s)}}class ScanResult{constructor(t,e){this.flow=t,this.ruleResults=e}}const w=class w{};w.autolaunchedType="AutoLaunchedFlow",w.backEndTypes=[w.autolaunchedType,"CustomEvent","InvocableProcess","Orchestrator","EvaluationFlow","ActionCadenceAutolaunchedFlow"],w.processBuilder=["Workflow"],w.surveyTypes=["Survey"],w.visualTypes=["Flow","IndividualObjectLinkingFlow","LoginFlow","RoutingFlow","Appointments","ActionCadenceStepFlow","ContactRequestFlow","ContactRequestFlow","CustomerLifecycle","FieldServiceMobile","FieldServiceWeb","SurveyEnrich"],w.unsupportedTypes=["CheckoutFlow","FSCLending","FSCLending","LoyaltyManagementFlow"],w.allTypes=function(){return[...this.backEndTypes,...this.visualTypes,...this.surveyTypes]};let FlowType=w;class ParsedFlow{constructor(t,e,s){this.uri=t,this.flow=e,s&&(this.errorMessage=s)}}class Compiler{constructor(){this.visitedElements=new Set}traverseFlow(t,e,s,r){var o;let n=[e];for(;n.length>0;){const i=[];for(const l of n)if(!this.visitedElements.has(l)){const u=(o=t.elements)==null?void 0:o.find(c=>c.name===l);u&&(s(u),this.visitedElements.add(l),i.push(...this.findNextElements(t,u,r)))}if(i.length===0)break;n=i}}findNextElements(t,e,s){var n,o;const r=[];if(!e.connectors||e.connectors.length===0)return r;for(const i of e.connectors){const l=((n=i==null?void 0:i.connectorTargetReference)==null?void 0:n.targetReference)??i.reference,u=(o=t.elements)==null?void 0:o.find(c=>c instanceof FlowNode&&c.name===l);u instanceof FlowNode&&u.name!==s&&r.push(u.name)}return r}}function convertFlowNodes(a,t,e){return a[e]=t.map(s=>s.element),a}function BuildFlow(a){let t={};for(const e of a){const s=e.subtype,r=a.filter(n=>s===n.subtype);t=convertFlowNodes(t,r,s)}return t}function fix(a){const t=[];for(const e of a)if(e.ruleResults&&e.ruleResults.length>0){const s=e.ruleResults.filter(r=>r.ruleName==="UnusedVariable"&&r.occurs||r.ruleName==="UnconnectedElement"&&r.occurs);if(s&&s.length>0){const r=FixFlows(e.flow,s);e.flow=r,t.push(e)}}return t}function FixFlows(a,t){var u;const e=t.find(c=>c.ruleName==="UnusedVariable"),s=e&&e.details&&e.details.length>0?e.details.map(c=>c.name):[],r=t.find(c=>c.ruleName==="UnconnectedElement"),n=r&&r.details&&r.details.length>0?r.details.map(c=>c.name):[],o=(u=a.elements)==null?void 0:u.filter(c=>{switch(c.metaType){case"variable":{const f=c;if(!s.includes(f.name))return c;break}case"node":{const f=c;if(!n.includes(f.name))return c;break}case"metadata":case"resource":return c}}),i=BuildFlow(o);return new Flow(a.fsPath,i)}class RuleCommon{constructor(t,e){this.docRefs=[],this.name=t.name,this.supportedTypes=t.supportedTypes,this.label=t.label,this.description=t.description,this.uri="https://github.com/Lightning-Flow-Scanner/lightning-flow-scanner-core/tree/master/src/main/rules/"+t.name+".ts",this.docRefs=t.docRefs,this.isConfigurable=t.isConfigurable,this.autoFixable=t.autoFixable,this.severity=e&&e.severity?e.severity:"error"}}class APIVersion extends RuleCommon{constructor(){super({name:"APIVersion",label:"Outdated API Version",description:"Introducing newer API components may lead to unexpected issues with older versions of Flows, as they might not align with the underlying mechanics. Starting from API version 50.0, the 'Api Version' attribute has been readily available on the Flow Object. To ensure smooth operation and reduce discrepancies between API versions, it is strongly advised to regularly update and maintain them.",supportedTypes:FlowType.allTypes(),docRefs:[],isConfigurable:!0,autoFixable:!1})}execute(flow,options){let flowAPIVersionNumber;if(flow.xmldata.apiVersion&&(flowAPIVersionNumber=+flow.xmldata.apiVersion),flowAPIVersionNumber)if(options&&options.expression){const expressionEvaluation=eval(flowAPIVersionNumber+options.expression);return expressionEvaluation?new RuleResult(this,[]):new RuleResult(this,[new ResultDetails(new FlowAttribute(expressionEvaluation?void 0:""+flowAPIVersionNumber,"apiVersion",options.expression))])}else return new RuleResult(this,[]);else return new RuleResult(this,[new ResultDetails(new FlowAttribute("API Version <49","apiVersion","<49"))])}}class AutoLayout extends RuleCommon{constructor(){super({name:"AutoLayout",label:"Auto-Layout Mode",description:"With Canvas Mode set to Auto-Layout, Elements are spaced, connected, and aligned automatically, keeping your Flow neatly organized thus saving you time.",supportedTypes:FlowType.allTypes(),docRefs:[],isConfigurable:!0,autoFixable:!1})}execute(t,e){var s;if(t.processMetadataValues){const r=t.xmldata.processMetadataValues.find(o=>o.name==="CanvasMode");return r.value&&typeof r.value=="object"&&r.value.stringValue&&r.value.stringValue==="AUTO_LAYOUT_CANVAS"?new RuleResult(this,[]):new RuleResult(this,[new ResultDetails(new FlowAttribute((s=r.value)==null?void 0:s.stringValue,"CanvasMode","!== AUTO_LAYOUT_CANVAS"))])}return new RuleResult(this,[])}}class CopyAPIName extends RuleCommon{constructor(){super({name:"CopyAPIName",label:"Copy API Name",description:"Maintaining multiple elements with a similar name, like 'Copy_X_Of_Element,' can diminish the overall readability of your Flow. When copying and pasting these elements, it's crucial to remember to update the API name of the newly created copy.",supportedTypes:FlowType.allTypes(),docRefs:[],isConfigurable:!1,autoFixable:!1})}execute(t){const e=t.elements.filter(n=>n instanceof FlowNode),s=[];for(const n of e)new RegExp("Copy_[0-9]+_of_[A-Za-z0-9]+").test(n.name)&&s.push(n);const r=[];for(const n of s)r.push(new ResultDetails(n));return new RuleResult(this,r)}}class CyclomaticComplexity extends RuleCommon{constructor(){super({name:"CyclomaticComplexity",label:"Cyclomatic Complexity",description:`The number of loops and decision rules, plus the number of decisions.
          Use a combination of 1) subflows and 2) breaking flows into multiple concise trigger ordered flows, 
          to reduce the cyclomatic complexity within a single flow, ensuring maintainability and simplicity.`,supportedTypes:FlowType.backEndTypes,docRefs:[{label:`Cyclomatic complexity is a software metric used to indicate the complexity of a program. 
              It is a quantitative measure of the number of linearly independent paths through a program's source code.`,path:"https://en.wikipedia.org/wiki/Cyclomatic_complexity"}],isConfigurable:!0,autoFixable:!1},{severity:"note"}),this.defaultThreshold=25,this.cyclomaticComplexityUnit=0}execute(t,e){var l,u;const s=(e==null?void 0:e.threshold)||this.defaultThreshold;let r=1;const n=(l=t==null?void 0:t.elements)==null?void 0:l.filter(c=>c.subtype==="decisions"),o=(u=t==null?void 0:t.elements)==null?void 0:u.filter(c=>c.subtype==="loops");for(const c of n||[]){const f=c.element.rules;Array.isArray(f)?r+=f.length+1:r+=1}r+=(o==null?void 0:o.length)??0,this.cyclomaticComplexityUnit=r;const i=[];return r>s&&i.push(new ResultDetails(new FlowAttribute(`${r}`,"CyclomaticComplexity",`>${s}`))),new RuleResult(this,i)}}class DMLStatementInLoop extends RuleCommon{constructor(){super({name:"DMLStatementInLoop",label:"DML Statement In A Loop",description:"To prevent exceeding Apex governor limits, it is advisable to consolidate all your database operations, including record creation, updates, or deletions, at the conclusion of the flow.",supportedTypes:FlowType.backEndTypes,docRefs:[{label:"Flow Best Practices",path:"https://help.salesforce.com/s/articleView?id=sf.flow_prep_bestpractices.htm&type=5"}],isConfigurable:!1,autoFixable:!1})}execute(t){const e=["recordDeletes","recordUpdates","recordCreates"],s=t.elements.filter(i=>i.subtype==="loops"),r=[],n=i=>{e.includes(i.subtype)&&r.push(i)};for(const i of s){let l;i.element.noMoreValuesConnector&&i.element.noMoreValuesConnector?l=i.element.noMoreValuesConnector.targetReference:l=i.name,new Compiler().traverseFlow(t,i.name,n,l)}const o=r.map(i=>new ResultDetails(i));return new RuleResult(this,o)}}class DuplicateDMLOperation extends RuleCommon{constructor(){super({name:"DuplicateDMLOperation",label:"Duplicate DML Operation",description:"When the flow executes database changes or actions between two screens, it's important to prevent users from navigating back between screens. Failure to do so may result in duplicate database operations being performed within the flow.",supportedTypes:FlowType.visualTypes,docRefs:[],isConfigurable:!1,autoFixable:!1})}execute(t){const e=t.elements.filter(c=>c instanceof FlowNode),s=[],r=[],n=[],o=this.findStart(t);if(!o||o===-1)throw"Can not find starting element";let i=!1,l=[o];do if(l=l.filter(c=>!s.includes(c)),l.length>0){for(const[c,f]of e.entries())if(l.includes(c)){const d=[];if(f.connectors&&f.connectors.length>0)for(const h of f.connectors)h.reference&&d.push(h.reference);if(i=this.flagDML(f,i),d.length>0){const h=e.filter(p=>d.includes(p.name));for(const p of h){const m=e.findIndex(g=>p.name===g.name);p.subtype==="screens"&&i&&p.element.allowBack&&p.element.allowBack=="true"&&p.element.showFooter=="true"&&n.push(p),s.includes(m)||l.push(m)}}s.push(c)}}else for(const c of e.keys())s.includes(c)||r.push(c);while(s.length+r.length<e.length);const u=[];for(const c of n)u.push(new ResultDetails(c));return new RuleResult(this,u)}flagDML(t,e){return["recordDeletes","recordUpdates","recordCreates"].includes(t.subtype)?!0:e===!0&&t.subtype==="screens"&&t.element.allowBack&&t.element.allowBack=="true"?!1:e}findStart(t){const e=t.elements.filter(r=>r instanceof FlowNode);let s;return t.startElementReference?s=e.findIndex(r=>r.name==t.startElementReference):s=e.findIndex(r=>r.subtype==="start"),s}}class FlowDescription extends RuleCommon{constructor(){super({name:"FlowDescription",label:"Missing Flow Description",description:"Descriptions play a vital role in documentation. We highly recommend including details about where they are used and their intended purpose.",supportedTypes:[...FlowType.backEndTypes,...FlowType.visualTypes],docRefs:[],isConfigurable:!1,autoFixable:!1})}execute(t){return!t.xmldata.description?new RuleResult(this,[new ResultDetails(new FlowAttribute("undefined","description","!==null"))]):new RuleResult(this,[])}}class FlowName extends RuleCommon{constructor(){super({name:"FlowName",label:"Flow Naming Convention",description:"The readability of a flow is of utmost importance. Establishing a naming convention for the Flow Name significantly enhances findability, searchability, and maintains overall consistency. It is advisable to include at least a domain and a brief description of the actions carried out in the flow, for instance, 'Service_OrderFulfillment'.",supportedTypes:FlowType.allTypes(),docRefs:[{label:"Naming your Flows is more critical than ever. By Stephen Church",path:"https://www.linkedin.com/posts/stephen-n-church_naming-your-flows-this-is-more-critical-activity-7099733198175158274-1sPx?utm_source=share&utm_medium=member_desktop"}],isConfigurable:!0,autoFixable:!1})}execute(t,e){const s=e&&e.expression?e.expression:"[A-Za-z0-9]+_[A-Za-z0-9]+";return new RegExp(s).test(t.name)?new RuleResult(this,[]):new RuleResult(this,[new ResultDetails(new FlowAttribute(t.name,"name",s))])}}class HardcodedId extends RuleCommon{constructor(){super({name:"HardcodedId",label:"Hardcoded Id",description:"Avoid hard-coding IDs as they are org-specific. Instead, pass them into variables at the start of the flow. You can achieve this by utilizing merge fields in URL parameters or employing a Get Records element.",supportedTypes:FlowType.allTypes(),docRefs:[{label:"Flow Best Practices",path:"https://help.salesforce.com/s/articleView?id=sf.flow_prep_bestpractices.htm&type=5"},{label:"Don't hard code Record Type IDs in Flow. By Stephen Church.",path:"https://www.linkedin.com/feed/update/urn:li:activity:6947530300012826624/?updateEntityUrn=urn%3Ali%3Afs_feedUpdate%3A%28V2%2Curn%3Ali%3Aactivity%3A6947530300012826624%29"}],isConfigurable:!1,autoFixable:!1})}execute(t){const e=[],s=/\b[a-zA-Z0-9]{5}0[a-zA-Z0-9]{9}([a-zA-Z0-9]{3})?\b/g;for(const n of t.elements){const o=JSON.stringify(n);s.test(o)&&e.push(n)}const r=e.map(n=>new ResultDetails(n));return new RuleResult(this,r)}}class InactiveFlow extends RuleCommon{constructor(){super({name:"InactiveFlow",label:"Inactive Flow",description:"Like cleaning out your closet: deleting unused flows is essential. Inactive flows can still cause trouble, like accidentally deleting records during testing, or being activated as subflows within parent flows.",supportedTypes:FlowType.allTypes(),docRefs:[],isConfigurable:!1,autoFixable:!1})}execute(t){var r;const e=[];(r=t.elements)==null||r.forEach(n=>{const o=JSON.stringify(n.element);n.subtype==="status"&&o!=='"Active"'&&e.push(n)});const s=[];for(const n of e)s.push(new ResultDetails(new FlowAttribute(JSON.stringify(n.element),n.subtype,"!= Active")));return new RuleResult(this,s)}}class MissingFaultPath extends RuleCommon{constructor(){super({name:"MissingFaultPath",label:"Missing Fault Path",description:"At times, a flow may fail to execute a configured operation as intended. By default, the flow displays an error message to the user and notifies the admin who created the flow via email. However, you can customize this behavior by incorporating a Fault Path.",supportedTypes:[...FlowType.backEndTypes,...FlowType.visualTypes],docRefs:[{label:"Flow Best Practices",path:"https://help.salesforce.com/s/articleView?id=sf.flow_prep_bestpractices.htm&type=5"}],isConfigurable:!1,autoFixable:!1}),this.applicableElements=["recordLookups","recordDeletes","recordUpdates","recordCreates","waits","actionCalls"]}execute(t){var i;const e=new Compiler,s=[],r=((i=t.elements)==null?void 0:i.filter(l=>{const u=l;return this.applicableElements.includes(u.subtype)})).map(l=>l.name),n=t.start.triggerType==="RecordBeforeSave",o=l=>{if(!l.connectors.find(u=>u.type==="faultConnector")&&r.includes(l.name)){if(n&&l.subtype==="recordUpdates")return;this.isPartOfFaultHandlingFlow(l,t)||s.push(new ResultDetails(l))}};return e.traverseFlow(t,t.startReference,o),new RuleResult(this,s)}isPartOfFaultHandlingFlow(t,e){var r;const s=(r=e.elements)==null?void 0:r.filter(n=>n instanceof FlowNode);for(const n of s)if(n!==t&&n.connectors.find(o=>o.type==="faultConnector"&&o.reference===t.name))return!0;return!1}}class MissingNullHandler extends RuleCommon{constructor(){super({name:"MissingNullHandler",label:"Missing Null Handler",description:"When a Get Records operation doesn't find any data, it returns null. To ensure data validation, utilize a decision element on the operation result variable to check for a non-null result.",supportedTypes:[...FlowType.backEndTypes,...FlowType.visualTypes],docRefs:[],isConfigurable:!1,autoFixable:!1})}execute(t){const e=["recordLookups"],s=t.elements.filter(i=>i.metaType==="node"&&e.includes(i.subtype)),r=t.elements.filter(i=>i.metaType==="node"&&i.subtype==="decisions"),n=[];for(const i of s){const l=i.name;let u=!1,c=[];if(i.element.storeOutputAutomatically)c=[l];else if(i.element.outputReference)c=i.element.outputReference;else if(i.element.outputAssignments){const f=i.element.outputAssignments;for(const d of f)c.push(d.assignToReference)}for(const f of r){const d=f.element.rules;for(const h of d)for(const p of h.conditions){let m=!1,g=!1,b=!1;if(p.leftValueReference&&p.leftValueReference.length>0){const y=p.leftValueReference;for(const R of c)if(m=R.includes(y),m)break}p.operator&&p.operator.length>0&&(g=p.operator==="IsNull"),p.rightValue&&p.rightValue.length>0&&p.rightValue.booleanValue&&p.rightValue.booleanValue.length>0&&(b=p.rightValue.booleanValue.toLowerCase()==="false"),m&&g&&b&&(u=!0)}}u||n.push(i)}const o=[];for(const i of n)o.push(new ResultDetails(i));return new RuleResult(this,o)}}class ProcessBuilder extends RuleCommon{constructor(){super({name:"ProcessBuilder",label:"No Process Builder",description:"Salesforce is transitioning away from Workflow Rules and Process Builder in favor of Flow. Ensure you're prepared for this transition by migrating your organization's automation to Flow. Refer to official documentation for more information on the transition process and tools available.",supportedTypes:FlowType.processBuilder,docRefs:[{label:"Process Builder Retirement",path:"https://help.salesforce.com/s/articleView?id=000389396&type=1"}],isConfigurable:!0,autoFixable:!1})}execute(t,e){return new RuleResult(this,[new ResultDetails(new FlowAttribute("Workflow","processType","== Workflow"))])}}class SOQLQueryInLoop extends RuleCommon{constructor(){super({name:"SOQLQueryInLoop",label:"SOQL Query In A Loop",description:"To prevent exceeding Apex governor limits, it is advisable to consolidate all your SOQL queries at the conclusion of the flow.",supportedTypes:FlowType.backEndTypes,docRefs:[{label:"Flow Best Practices",path:"https://help.salesforce.com/s/articleView?id=sf.flow_prep_bestpractices.htm&type=5"}],isConfigurable:!1,autoFixable:!1})}execute(t){const e=["recordLookups"],s=t.elements.filter(i=>i.subtype==="loops"),r=[],n=i=>{e.includes(i.subtype)&&r.push(i)};for(const i of s){let l;i.element.noMoreValuesConnector&&i.element.noMoreValuesConnector?l=i.element.noMoreValuesConnector.targetReference:l=i.name,new Compiler().traverseFlow(t,i.name,n,l)}const o=r.map(i=>new ResultDetails(i));return new RuleResult(this,o)}}class UnconnectedElement extends RuleCommon{constructor(){super({name:"UnconnectedElement",label:"Unconnected Element",description:"To maintain the efficiency and manageability of your Flow, it's best to avoid including unconnected elements that are not in use.",supportedTypes:[...FlowType.backEndTypes,...FlowType.visualTypes],docRefs:[],isConfigurable:!1,autoFixable:!0})}execute(t){const e=new Set,s=l=>{e.add(l.name)},r=t.elements.filter(l=>l instanceof FlowNode),n=this.findStart(r);n!==-1&&new Compiler().traverseFlow(t,r[n].name,s);const i=r.filter(l=>!e.has(l.name)).map(l=>new ResultDetails(l));return new RuleResult(this,i)}findStart(t){return t.findIndex(e=>e.subtype==="start")}}class UnsafeRunningContext extends RuleCommon{constructor(){super({name:"UnsafeRunningContext",label:"Unsafe Flow Running Context",description:"This flow is configured to run in System Mode without Sharing. This system context grants all running users the permission to view and edit all data in your org. Running a flow in System Mode without Sharing can lead to unsafe data access.",supportedTypes:[...FlowType.backEndTypes,...FlowType.visualTypes],docRefs:[{label:"Learn about data safety when running flows in system context in Salesforce Help",path:"https://help.salesforce.com/s/articleView?id=sf.flow_distribute_context_data_safety_system_context.htm&type=5"}],isConfigurable:!1,autoFixable:!1},{severity:"warning"})}execute(t){const e="runInMode"in t.xmldata,s=e?t.xmldata.runInMode:void 0,r="SystemModeWithoutSharing",n=[];return e&&s===r&&n.push(new ResultDetails(new FlowAttribute(s,"runInMode",`== ${r}`))),new RuleResult(this,n)}}class UnusedVariable extends RuleCommon{constructor(){super({name:"UnusedVariable",label:"Unused Variable",description:"To maintain the efficiency and manageability of your Flow, it's advisable to avoid including unconnected variables that are not in use.",supportedTypes:[...FlowType.backEndTypes,...FlowType.visualTypes],docRefs:[],isConfigurable:!1,autoFixable:!0})}execute(t){const e=[];for(const r of t.elements.filter(n=>n instanceof FlowVariable)){const n=r.name;if([...JSON.stringify(t.elements.filter(o=>o instanceof FlowNode)).matchAll(new RegExp(n,"gi"))].map(o=>o.index).length===0&&[...JSON.stringify(t.elements.filter(o=>o instanceof FlowResource)).matchAll(new RegExp(n,"gi"))].map(o=>o.index).length===0){const o=[...JSON.stringify(r).matchAll(new RegExp(r.name,"gi"))].map(l=>l.index);[...JSON.stringify(t.elements.filter(l=>l instanceof FlowVariable)).matchAll(new RegExp(n,"gi"))].map(l=>l.index).length===o.length&&e.push(r)}}const s=[];for(const r of e)s.push(new ResultDetails(r));return new RuleResult(this,s)}}class SameRecordFieldUpdates extends RuleCommon{constructor(){super({name:"SameRecordFieldUpdates",label:"Same Record Field Updates",description:"Before-save same-record field updates allows you to update the record using variable assignments to `$Record`. This is significantly faster than doing another DML on the same-record that triggered the flow",supportedTypes:[...FlowType.backEndTypes],docRefs:[{label:"Learn about same record field updates",path:"https://architect.salesforce.com/decision-guides/trigger-automation#Same_Record_Field_Updates"}],isConfigurable:!1,autoFixable:!1},{severity:"warning"}),this.qualifiedRecordTriggerTypes=new Set(["Create","Update"])}execute(t){var o,i,l;const e=[],s=((o=t.start)==null?void 0:o.triggerType)==="RecordBeforeSave",r=this.qualifiedRecordTriggerTypes.has((i=t.start)==null?void 0:i.recordTriggerType);if(!s||!r)return new RuleResult(this,e);const n=(l=t.elements)==null?void 0:l.filter(u=>u.subtype==="recordUpdates");if(n==null||typeof n[Symbol.iterator]!="function")return new RuleResult(this,e);for(const u of n)typeof u.element=="object"&&"inputReference"in u.element&&u.element.inputReference==="$Record"&&e.push(new ResultDetails(u));return new RuleResult(this,e)}}const DefaultRuleStore={APIVersion,AutoLayout,CopyAPIName,CyclomaticComplexity,DMLStatementInLoop,DuplicateDMLOperation,FlowDescription,FlowName,HardcodedId,MissingFaultPath,MissingNullHandler,ProcessBuilder,SOQLQueryInLoop,UnconnectedElement,UnusedVariable,InactiveFlow,UnsafeRunningContext,SameRecordFieldUpdates};class RuleLoader{static loadCustomRule(t,e){try{const s=pathBrowserifyExports.resolve(process$1.cwd(),e),r=require(s);if(r[t]&&typeof r[t]=="function")return new r[t];console.error(`Error: ${e} does not export ${t} class.`);return}catch(s){console.error(`Error importing ${e}:`,s);return}}}class DynamicRule{constructor(t){if(DefaultRuleStore[t]===void 0||DefaultRuleStore[t]===null){const e=RuleLoader.loadCustomRule(t,pathBrowserifyExports.join(__dirname,`../rules/${t}`));if(e)return e;throw new Error(`Rule '${t}' does not exist in the store.`)}return new DefaultRuleStore[t]}}function GetRuleDefinitions(a){var e,s;const t=[];if(a&&a instanceof Map)for(const r of a.keys()){let n="error";try{const o=(e=a.get(r))==null?void 0:e.path,i=(s=a.get(r))==null?void 0:s.severity;if(i&&(i==="error"||i==="warning"||i==="note")&&(n=i),o){const l=RuleLoader.loadCustomRule(r,o);t.severity=n,t.push(l)}else{const l=new DynamicRule(r);l.severity=n,t.push(l)}}catch(o){console.log(o.message)}}else for(const r in DefaultRuleStore){const n=new DynamicRule(r);t.push(n)}return t}function getRules(a){if(a&&a.length>0){const t=new Map(a.map(e=>[e,"error"]));return GetRuleDefinitions(t)}else return GetRuleDefinitions()}var empty=null;async function parse(a){const t=[];for(const e of a)try{const s=pathBrowserifyExports.normalize(e),n=(await empty.readFileSync(s)).toString(),o=xmlbuilder2.convert(n,{format:"object"});t.push(new ParsedFlow(e,new Flow(e,o)))}catch(s){t.push(new ParsedFlow(e,void 0,s.errorMessage))}return t}function scan(a,t){const e=[];for(const r of a)!r.errorMessage&&r.flow&&e.push(r.flow);let s;if(t!=null&&t.rules&&Object.entries(t.rules).length>0?s=ScanFlows(e,t):s=ScanFlows(e),t!=null&&t.exceptions){for(const[r,n]of Object.entries(t.exceptions))for(const o of s)if(o.flow.name===r){for(const i of o.ruleResults)if(n[i.ruleName]){const l=n[i.ruleName],u=i.details.filter(c=>!l.includes(c.name));i.details=u,i.occurs=u.length>0}}}return s}function ScanFlows(a,t){const e=[];let s=[];if(t&&t.rules){const r=new Map;for(const[n,o]of Object.entries(t.rules))r.set(n,o);s=GetRuleDefinitions(r)}else s=GetRuleDefinitions();for(const r of a){const n=[];for(const o of s)try{if(o.supportedTypes.includes(r.type)){let i;t&&t.rules&&t.rules[o.name]&&(i=t.rules[o.name]);const l=i&&Object.keys(i).length>0?o.execute(r,i):o.execute(r);l.severity!==o.severity&&(l.severity=o.severity),n.push(l)}else n.push(new RuleResult(o,[]))}catch{const l="Something went wrong while executing "+o.name+" in the Flow: '"+r.name;n.push(new RuleResult(o,[],l))}e.push(new ScanResult(r,n))}return e}exports.Compiler=Compiler,exports.Flow=Flow,exports.FlowAttribute=FlowAttribute,exports.FlowElement=FlowElement,exports.FlowNode=FlowNode,exports.FlowResource=FlowResource,exports.FlowType=FlowType,exports.FlowVariable=FlowVariable,exports.ParsedFlow=ParsedFlow,exports.ResultDetails=ResultDetails,exports.RuleResult=RuleResult,exports.ScanResult=ScanResult,exports.fix=fix,exports.getRules=getRules,exports.parse=parse,exports.scan=scan,Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"})});
